generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model author {
  author_id     String  @id @db.VarChar(20)
  name          String? @db.VarChar(200)
  sex           Int     @db.UnsignedTinyInt
  avatar        String? @db.Text
  year_of_birth Int?
  year_of_dead  Int?
  story         String? @db.VarChar(255)
  book_author   book_author[]
}

model book {
  book_id        String            @id @db.VarChar(20)
  name           String            @db.Text
  pdf            String?           @db.Text
  published_day  String            @db.VarChar(20)
  published_time Int
  category_id    String            @db.VarChar(20)
  introduce_file String?           @db.VarChar(255)
  avatar         String?           @db.Text
  category       category          @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_BOOK")
  book_image     book_image[]
  book_reader    book_reader[]
  book_author    book_author[]
  favorite_books favorite_books[]
  read_late      read_late[]
  used_read      used_read[]

  @@index([category_id], map: "FK_BOOK")
}

model book_author {
  book_id   String @db.VarChar(20)
  author_id String @db.VarChar(20)
  book      book   @relation(fields: [book_id], references: [book_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_BOOK_AUTHOR_BOOK")
  author    author @relation(fields: [author_id], references: [author_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_AUTHOR_BOOK_AUTHOR")

  @@id([book_id, author_id])
  @@index([book_id], map: "FK_BOOK_AUTHOR_BOOK")
}

model book_image {
  book_id String @db.VarChar(20)
  image   String @db.Text
  name    String @db.VarChar(250)
  book    book   @relation(fields: [book_id], references: [book_id], onUpdate: Restrict, map: "book_image_ibfk_1")

  @@id([book_id, name])
}

model favorite_books {
  book_id   String @db.VarChar(20)
  reader_id String @db.VarChar(20)
  book      book   @relation(fields: [book_id], references: [book_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_FAVORITE_BOOKS_BOOK")
  reader    reader @relation(fields: [reader_id], references: [reader_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_FAVORITE_BOOKS_READER")

  @@id([book_id, reader_id])
  @@index([reader_id], map: "FK_FAVORITE_BOOKS_READER")
}

model read_late {
  book_id   String  @db.VarChar(20)
  reader_id String  @db.VarChar(20)
  added_at  String  @unique @db.VarChar(20)
  book      book    @relation(fields: [book_id], references: [book_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_READ_LATE_BOOK")
  reader    reader  @relation(fields: [reader_id], references: [reader_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_READ_LATE_READER")

  @@id([reader_id, book_id])
  @@index([book_id], map: "FK_READ_LATE_BOOK")
}

model used_read {
  book_id String    @db.VarChar(20)
  reader_id String  @db.VarChar(20)
  added_at  String  @unique @db.VarChar(20)
  book      book    @relation(fields: [book_id], references: [book_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_USED_READ_BOOK")
  reader    reader  @relation(fields: [reader_id], references: [reader_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_USED_READ_READER")

  @@id([reader_id, book_id])
  @@index([book_id], map: "FK_USED_READ_BOOK")
}

model book_reader {
  reader_id String @db.VarChar(20)
  book_id   String @db.VarChar(20)
  book      book   @relation(fields: [book_id], references: [book_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_BOOK_READER_BOOK")
  reader    reader @relation(fields: [reader_id], references: [reader_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_BOOK_READER_USER")

  @@id([reader_id, book_id])
  @@index([book_id], map: "FK_BOOK_READER_BOOK")
}

model category {
  category_id String  @id @db.VarChar(20)
  name        String  @db.VarChar(20)
  avatar      String? @db.Text
  book        book[]
}

model user {
  user_id                   String        @id @db.VarChar(20)
  session_id                String?       @unique @db.VarChar(200)
  password                  String        @db.VarChar(100)
  last_name                 String        @db.VarChar(200)
  first_name                String        @db.VarChar(200)
  avatar                    String?       @db.Text
  email                     String        @unique @db.VarChar(100)
  phone                     String        @unique @db.VarChar(11)
  sex                       Int           @default(0) @db.UnsignedTinyInt
  power                     Boolean
  mfa_enable                Boolean
  otp_code                  String?       @unique @db.VarChar(10)
  reset_password_token      String?       @db.Text
}

model reader {
  reader_id                 String            @id @db.VarChar(20)
  session_id                String?           @unique @db.VarChar(200)
  last_name                 String            @db.VarChar(200)
  first_name                String            @db.VarChar(200)
  password                  String            @db.VarChar(100)
  avatar                    String?           @db.Text
  email                     String            @unique @db.VarChar(100)
  phone                     String?           @unique @db.VarChar(11)
  sex                       Int               @default(0) @db.UnsignedTinyInt
  blocked                   Int               @default(0) @db.UnsignedTinyInt
  reset_password_token      String?           @db.Text
  book_reader               book_reader[]
  favorite_books            favorite_books[]
  read_late                 read_late[]
  used_read                 used_read[]
}
